AI 프롬프트 (그대로 복붙)

역할: 당신은 시니어 프론트엔드 엔지니어다.
목표: “파일 확장자 차단 관리” 단일 페이지 앱(SPA)을 React + Vite + JavaScript로 구현한다. 배포 대상은 S3+CloudFront다. 코드 가독성, 에러 처리, 입력 검증을 실무 수준으로 맞춘다. TypeScript는 사용하지 않는다.

기술 스펙

React 18 + Vite + JavaScript

TailwindCSS (컴포넌트는 직접 빌드: Checkbox, Input, Tag, Button)

TanStack Query(React Query)로 서버 상태 관리

React Hook Form + Zod로 폼/런타임 검증

axios 인스턴스(baseURL = import.meta.env.VITE_API_BASE_URL)

ESLint/Prettier, 절대경로 별칭 @/*

빌드 산출물 캐싱 전략: 정적 자산=immutable, HTML=no-cache

화면/UX 요구사항

고정 확장자 섹션

제목: “고정 확장자(자주 차단)”

체크박스 리스트(기본 모두 미체크).

토글 시 즉시 PATCH 저장(낙관적 업데이트, 실패 시 롤백+토스트).

새로고침 후에도 서버 상태가 반영되어 유지.

고정 확장자는 커스텀 리스트에 표시하지 않음.

커스텀 확장자 섹션

입력 + “추가” 버튼. 입력 규칙:

소문자·숫자만, 길이 1~20, 앞의 . 자동 제거, 공백 제거.

중복 불가(정규화 후 비교), 최대 200개 제한.

“추가” 시 POST 저장 후 아래 태그(pill) 목록에 반영.

태그의 X 버튼으로 DELETE.

카운터: “n / 200”.

에러/중복/초과 → 폼 에러 + 토스트.

공통 UX

초기 로딩 스켈레톤, 비어있음 표시.

요청 중 버튼 disabled, 실패시 재시도 버튼.

접근성: 포커스 링, aria-label.

API 계약(백엔드와 연동)

Base URL: import.meta.env.VITE_API_BASE_URL

GET /blocklist/fixed → 200 { items: [{ ext, blocked }], updatedAt }

PATCH /blocklist/fixed → 요청 { updates: [{ ext, blocked }] } / 응답 { ok: true }

GET /blocklist/custom → 200 { items: string[], count, limit: 200 }

POST /blocklist/custom → 요청 { ext } / 응답 201 { ext }

DELETE /blocklist/custom/:ext → 204

백엔드 미완성 시 **MSW(Mock Service Worker)**로 동일 계약의 핸들러를 포함하여 Dev 모드에서 동작시켜라.

데이터/검증 규칙

normalizeExt(s): 공백 제거 → 앞의 점 제거 → 소문자화 → 정규식 ^[a-z0-9]{1,20}$
.tar.gz는 마지막 조각(gz)만 허용.

교차 중복 금지: 커스텀 추가 시 고정에 동일 확장자가 blocked=true이면 에러.

최대 200개 초과 시 에러.

기본 고정 확장자(클라이언트 하드코딩, 상태만 서버 반영)
exe, sh, bat, cmd, com, dll, jar, js, msi, php, py, rb, scr, vbs, reg, ps1


기본 blocked=false, 서버 응답으로 체크 상태를 결정.

폴더 구조
src/
  app/
    queryClient.js
  components/
    FixedList.jsx
    CustomList.jsx
    ExtChip.jsx
    Toast.jsx
  features/blocklist/
    api.js       // axios 인스턴스 & API 함수
    hooks.js     // useQuery/useMutation
    schema.js    // zod 스키마, normalizeExt
  pages/
    BlocklistPage.jsx
  styles/globals.css
main.jsx
index.html

구현 지침

React Query:

useFixedList(GET), useUpdateFixed(PATCH; 낙관적)

useCustomList(GET), useAddCustom(POST; 낙관적), useDeleteCustom(DELETE; 낙관적)

RHF + Zod로 입력 검증. 버튼은 요청 중 disabled.

Tailwind로 반응형(모바일 1열, 데스크탑 2열).

에러 토스트, 네트워크 실패시 롤백.

빌드/배포 산출물

npm run build로 dist/ 생성.

정적자산은 S3 업로드 시 Cache-Control: public, max-age=31536000, immutable

HTML은 no-cache로 업로드. 이후 CloudFront 무효화.

수락 기준

새로고침 후 상태 보존(서버 반영)

고정 확장자 토글이 DB에 저장됨

커스텀 확장자 20자/200개/중복 규칙 준수, 추가·삭제 정상 동작

고정 항목은 커스텀에 표시되지 않음

로딩/성공/오류 상태가 UI에 명확히 표현

산출물: 작동하는 Vite 프로젝트 전체 코드 + README(실행/빌드/배포/환경변수/API 계약). 가능하면 MSW 목도 포함.